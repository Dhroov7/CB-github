{"version":3,"sources":["App.js","components/Repo.jsx","components/Repos.jsx","serviceWorker.js","index.js"],"names":["App","state","handleSubmit","props","history","push","username","handleChange","e","setState","target","value","className","href","alt","src","id","this","userUrl","onSubmit","type","placeholder","name","onChange","Component","Repo","content","html_url","stargazers_count","Repos","prevList","currentList","repos","slice","start","page","showPrevButton","showNextButton","nextList","totalPages","userQuery","qs","parse","location","search","ignoreQueryPrefix","axios","get","then","response","data","length","map","repo","key","aria-label","onClick","Boolean","window","hostname","match","ReactDOM","render","basename","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0cafff1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass App extends Component {\n  state = {};\n\n  handleSubmit = () => {\n    this.props.history.push('/result?username=' + this.state.username);\n  }\n\n  handleChange = (e) => {\n    this.setState({username: e.target.value})\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"row mt-3\">\n          <div className=\"col\">\n            <a href=\"/\">\n              <img\n                alt=\"CB logo\"\n                src=\"https://codingblocks.com/assets/images/cb/cblogo.png\"\n              />\n            </a>\n          </div>\n          <div className=\"col-8\"></div>\n          <div className=\"col\">\n            <h6 id=\"username\">\n              {this.props.username ? (\n                <a href={this.props.userUrl}>Hey, {this.props.username}</a>\n              ) : null}\n            </h6>\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n          <div className=\"col-3\"></div>\n          <div className=\"col\">\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"col-10\">\n                  <div className=\"form-group\">\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      id=\"username\"\n                      placeholder=\"Search\"\n                      name=\"username\"\n                      value={this.props.username}\n                      onChange={this.handleChange}\n                    />\n                  </div>\n                </div>\n                <div className=\"col-2\">\n                  <input\n                    type=\"submit\"\n                    className=\"btn btn-secondary\"\n                    value=\"Submit\"\n                  ></input>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div className=\"col-3\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nclass Repo extends Component {\n  state = {\n  };\n  render() {\n    return (\n      <div>\n        <li className=\"list-group-item mb-4\">\n          <a href={this.props.content.html_url} target=\"_blank\">\n            <div className=\"row\">\n              <div className=\"col-6\">{this.props.content.name}</div>\n              <div className=\"col\"></div>\n              <div className=\"col-2\">\n                <i className=\"fas fa-star\"></i>{this.props.content.stargazers_count}\n              </div>\n            </div>\n          </a>\n        </li>\n      </div>\n    );\n  }\n}\n\nexport default Repo;\n","import React, { Component } from \"react\";\nimport App from \"../App\";\nimport Repo from \"./Repo\";\nimport axios from \"axios\";\nimport qs from 'query-string';\n\nclass Repos extends Component {\n  constructor() {\n    super();  \n    this.state = {\n      repos: [],\n      currentList: [],\n      userQuery: \"\",\n      start: 0,\n      showPrevButton: false,\n      showNextButton: false,\n      totalPages: 0,\n      page: 0\n    };\n  }\n\n  componentDidMount() {\n    const username = qs.parse(this.props.location.search, { ignoreQueryPrefix: true }).username;\n    this.setState({userQuery: username})\n    axios\n      .get(`https://api.github.com/users/${username}/repos`)\n      .then(response => {\n        this.setState({ repos: response.data });\n        this.setState({\n          currentList: this.state.repos.slice(this.state.start, 10)\n        });\n        this.setState({ showNextButton: true });\n        this.setState({ start: this.state.start + 10 });\n        this.setState({totalPages: response.data.length / 10});\n        this.setState({page: 1});\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <App username={this.state.userQuery} userUrl={'https://github.com/' + this.state.userQuery}/>\n        <div className=\"row mt-5\">\n          <div className=\"col-3\"></div>\n          <div className=\"col\">\n            <ul>\n              {this.state.currentList.map(repo => (\n                <Repo content={repo} key={repo.id} />\n              ))}\n            </ul>\n          </div>\n          <div className=\"col-3\"></div>\n        </div>\n\n        <div className=\"row mt-5\">\n          <div className=\"col-5\"></div>\n          <div className=\"col\">\n            <nav aria-label=\"Page navigation example\">\n              <ul className=\"pagination\">\n                {this.state.showPrevButton ? (\n                  <li className=\"page-item\" id=\"previousButton\">\n                    <button onClick={this.prevList} className=\"page-link\">\n                      Previous\n                    </button>\n                  </li>\n                ) : null}\n\n                {this.state.showNextButton ? (\n                  <li className=\"page-item\" id=\"nextButton\">\n                    <button onClick={this.nextList} className=\"page-link\">\n                      Next\n                    </button>\n                  </li>\n                ) : null}\n              </ul>\n            </nav>\n          </div>\n          <div className=\"col-3\"></div>\n        </div>\n        <div></div>\n      </div>\n    );\n  }\n\n  prevList = () => {\n    this.setState({\n      currentList: this.state.repos.slice(\n        this.state.start - 20,\n        this.state.start - 10\n      )\n    });\n    this.setState({ start: this.state.start - 10 });\n    this.setState({page: this.state.page - 1});\n\n    if (this.state.page > 1) {\n      this.setState({ showPrevButton: true });\n    } else {\n      this.setState({ showPrevButton: false });\n    }\n    this.setState({ showNextButton: true });\n  };\n\n  nextList = () => {\n    this.setState({\n      currentList: this.state.repos.slice(\n        this.state.start,\n        this.state.start + 10\n      )\n    });\n    this.setState({ start: this.state.start + 10 });\n    this.setState({page: this.state.page + 1});\n\n    if (this.state.page < this.state.totalPages) {\n      this.setState({ showNextButton: true });\n    } else {\n      this.setState({ showNextButton: false });\n    }\n    this.setState({ showPrevButton: true });\n  };\n}\n\nexport default Repos;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Repos from \"./components/Repos\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter basename=\"/\">\n    <Switch>\n      <Route path=\"/\" exact component={App} />\n      <Route path=\"/result\" component={Repos} />\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}